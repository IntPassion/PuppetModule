# Configures where to put the kdump /proc/vmcore files
#
# This file contains a series of commands to perform (in order) when a
# kernel crash has happened and the kdump kernel has been loaded.  Directives in
# this file are only applicable to the kdump initramfs, and have no effect if
# the root filesystem is mounted and the normal init scripts are processed
#
# Currently only one dump target and path may be configured at once
# if the configured dump target fails, the default action will be preformed
# the default action may be configured with the default directive below.  If the
# configured dump target succedes 
#
# Basics commands supported are:
# path <path> 		- Append path to the filesystem device which you are
#			  dumping to.  Ignored for raw device dumps.
#		 	  If unset, will default to /var/crash.
#
# core_collector <command> <options>
#			- This allows you to specify the command to copy
#			  the vmcore.  You could use the dump filtering
#			  program makedumpfile, the default one, to retrieve
#			  your core, which on some arches can drastically
#			  reduce core file size. See /sbin/makedumpfile --help
#			  for a list of options. Note that the -i and -g
#			  options are not needed here, as the initrd will
#			  automatically be populated with a config file
#			  appropriate for the running kernel.
#			  For ssh dump, scp should be used instead of cp.
#
# raw <partition>	- Will write /proc/vmcore into raw <partition>.
#
# nfs <nfs mount>	- Will mount fs and copy /proc/vmcore to
#			  <mnt>/<path>/%HOST-%DATE/, supports DNS.
#
# nfs4 <nfs mount>      - Will use NFSv4 instead of NFSv3
#
# net <nfs mount>       - This is a deprecated option to transfer vmcore over nfs.
#			   Use "nfs" option instead.
#
# ssh <user@server>	- Will copy /proc/vmcore to
#			  <user@server>:<path>/%HOST-%DATE/ via SSH,
#			  supports DNS. If makedumpfile is the core_collector,
#			  it is piped to an "ssh" shell, otherwise use the specified
#			  core_collector like scp.
#			  NOTE: make sure user has necessary write
#			  permissions on server
#
# net <user@server>     - This is a deprecated option to transfer vmcore over ssh.
#			  Use "ssh" option instead.
#
# <fs type> <partition> - Will mount -t <fs type> <partition> /mnt and copy
#		 	  /proc/vmcore to /mnt/<path>/127.0.0.1-%DATE/.
#			  NOTE: <partition> can be a device node, label or uuid.
#
# link_delay <seconds>
#			- Some network cards take a long time to initialize, and
#			  some spanning tree enabled networks do not transmit
#			  user traffic for long periods after a link state
#			  changes.  This optional parameter defines a wait
#			  period after a link is activated in which the
#			  initramfs will wait before attempting to transmit
#			  user data.
#
# kdump_post <binary | script>
# 			- This directive allows you to run a specified
# 			  executable just after the memory dump process
# 			  terminates. The exit status from the dump process
# 			  is fed to the kdump_post executable, which can be
# 			  used to trigger different actions for success or
# 			  failure.
#
# kdump_pre <binary | script>
#			- works just like the kdump_post directive, but instead
#			  of running after the dump process, runs immediately
#			  before.  Exit status of this binary is interpreted
#			  as follows:
#			  0 - continue with dump process as usual
#			  non 0 - reboot/halt the system
#
# extra_bins <binaries | shell scripts>
# 			- This directive allows you to specify additional
# 			  binaries or shell scripts you'd like to include in
# 			  your kdump initrd. Generally only useful in
# 			  conjunction with a kdump_post binary or script that
# 			  relies on other binaries or scripts.
#
# extra_modules <module(s)>
# 			- This directive allows you to specify extra kernel
# 			  modules that you want to be loaded in the kdump
# 			  initrd, typically used to set up access to
# 			  non-boot-path dump targets that might otherwise
# 			  not be accessible in the kdump environment. Multiple
# 			  modules can be listed, separated by a space, and any
# 			  dependent modules will automatically be included.
#
# default <reboot | halt | poweroff | shell | mount_root_run_init>
#			- Action to preform in case dumping to intended target
#			  fails. If no default action is specified, "reboot"
#			  is assumed default.
#
#			  reboot: If the default action is reboot simply reboot
#				  the system and loose the core that you are
#				  trying to retrieve.
#			  halt:   If the default action is halt, then simply
#				  halt the system after attempting to capture
#				  a vmcore, regardless of success or failure.
#			  poweroff: The system will be powered down
#			  shell:  If the default action is shell, then drop to
#				  an hush session inside the initramfs from
#				  where you can try to record the core manually.
#				  Exiting this shell reboots the system.
#	     mount_root_run_init: Mount root filesystem and run init. Kdump
#			  	    initscript will try to save dump to root
#			  	    filesystem in /var/crash dir. This will
#			  	    likely require a lot more memory to
#			  	    be reserved for kdump kernel.
#
# debug_mem_level <0-3>
#                       - Turns on debug/verbose output of kdump scripts
#                         regarding free/used memory at various points of
#                         execution. Higher level means more debugging output.
#                         0 - no output
#                         1 - partial /proc/meminfo
#                         2 - /proc/meminfo
#                         3 - /proc/meminfo + /proc/slabinfo

#raw /dev/sda5
#ext4 /dev/sda3
#ext4 LABEL=/boot
#ext4 UUID=03138356-5e61-4ab3-b58e-27507ac41937
#net my.server.com:/export/tmp
#net user@my.server.com
#path /var/crash
#core_collector makedumpfile -c --message-level 1 -d 31
#core_collector scp
#core_collector cp --sparse=always
#extra_bins /bin/cp
#link_delay 60
#kdump_post /var/crash/scripts/kdump-post.sh
#extra_bins /usr/bin/lftp
#disk_timeout 30
#extra_modules gfs2
#options modulename options
#default shell
#debug_mem_level 0
#force_rebuild 1
#sshkey /root/.ssh/kdump_id_rsa

<% config = scope.lookupvar('kdump::config') -%>
<% config.keys.sort.each do |c| -%>
<% next if config[c] == 'UNSET' -%>
<%= c %> <%= config[c] %>
<% end -%>
